generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  role           String          @default("user")
  accounts       Account[]
  sessions       Session[]
  craftingOrders CraftingOrder[]
  inventories    Inventory[]
}

model CraftingOrder {
  id        String    @id @default(cuid())
  status    Status    @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  quantity  Int
  details   String?
  userId    String
  itemsId   Int
  Enchants  Enchants?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item      @relation(fields: [itemsId], references: [id])

  @@index([userId])
}

model Item {
  id             Int             @id @default(autoincrement())
  name           String
  Image          String
  description    String
  quantity       Int             @default(1)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  weight         Float           @default(0)
  slots          Int             @default(0)
  refineable     Boolean         @default(false)
  tradeable      Boolean         @default(false)
  craftable      Boolean         @default(false)
  statsId        Int?
  Stats          ItemStats?      @relation(fields: [statsId], references: [id])
  craftingOrders CraftingOrder[]
  inventories    Inventory[]

  @@index([statsId])
}

model ItemStats {
  id   Int    @id @default(autoincrement())
  str  Int    @default(0)
  agi  Int    @default(0)
  vit  Int    @default(0)
  int  Int    @default(0)
  dex  Int    @default(0)
  luk  Int    @default(0)
  atk  Int    @default(0)
  matk Int    @default(0)
  def  Int    @default(0)
  mdef Int    @default(0)
  hit  Int    @default(0)
  flee Int    @default(0)
  crit Int    @default(0)
  aspd Int    @default(0)
  hp   Int    @default(0)
  sp   Int    @default(0)
  Item Item[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Inventory {
  id        String   @id @default(cuid())
  userId    String
  itemsId   Int
  quantity  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemsId], references: [id])
  @@index([userId])
}

enum Enchants {
  STR
  AGI
  VIT
  INT
  DEX
  LUK
  ATK
  MATK
  DEF
  MDEF
  HIT
  FLEE
  CRIT
  ASPD
  HP
  SP
}



enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
